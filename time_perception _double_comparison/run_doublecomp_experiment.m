function results = run_doublecomp_experiment(directory_link, save_after, participant_number, ...
    background_color, num_breaks, num_training_trials, stimulus, twoimage_standard_durations, ...
    twoimage_comp_durations, num_comp_trials, comp_type, comp_order, ...
    white, grey, black, window, screenXpixels, screenYpixels)
    % FIXME: If failed at any time, do the exit sequence
    
    [est_time, num_trials, results, exp_condition_list, train_condition_list, break_times] = setup_task(twoimage_comp_durations, num_comp_trials, num_training_trials, num_breaks);

    if background_color == "grey"
        back_color = grey;
    else
        back_color = white;
    end

    % Experiment Intro 
    display_screen_text('Thank you for your interest in participating in this experiment. \n \n Press the spacebar to continue.', ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);

    display_screen_text('You will begin with several practice trials to get used to the task. You can press the escape key at any time to exit the experiment. \n \n Press the spacebar to continue.', ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);

    % Task specific instructions 
    statement = 'In the task, you will be presented with two images, one after the other. \n \n Press the spacebar to continue.';
    display_screen_text(statement, ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);

    statement = 'After both images are presented, a black "plus" will appear on the screen. \n \n Press the spacebar to continue';
    display_screen_text(statement, ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);

    statement = 'Once the black plus appears, you will make a judgement about how long the second image was on screen relative to the first image. \n \n Press the spacebar to continue.';
    display_screen_text(statement, ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);
    
    if comp_type == "shorter/longer"
        statement = 'Press the 1 key if the second image presented felt shorter in duration than the first image. \n Press the 2 key if the second image presented felt longer than the first image. \n \n Press the spacebar to continue.';
    elseif comp_type == "equal/not equal"
        statement = 'Press the 1 key if the second image presented felt like it was presented for the same duration as the first image. \n Press 2 otherwise. \n \n Press the spacebar to continue.';
    else 
        statement = 'Press the 1 key if the second image presented felt shorter in duration than the first image. \n Press 2 if the second image presented feels like it was presented for the same duration as the first image. \n Press 3 if the second image presented felt longer than the first image. \n \n Press the spacebar to continue.';
    end 
    display_screen_text(statement, ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);

    statement = 'Please do not count the durations of the images to compare them. You can press the "escape" button at any time to end the experiment. \n \n Press the spacebar to continue';
    display_screen_text(statement, ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);

    statement = 'Please ask the proctor if you have any questions. \n \n Press the spacebar to continue.';
    display_screen_text(statement, ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);

    statement = 'The training segment will begin when you press the spacebar. \n \n Press the spacebar to begin.';
    display_screen_text(statement, ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);

    % Run training trials
    for trial_counter=1:length(train_condition_list)
        condition_num = train_condition_list(trial_counter);
        [stimulus, standard_duration, comp_duration] = find_condition(condition_num, stimulus, twoimage_comp_durations, twoimage_standard_durations);
        run_trial(stimulus, standard_duration, comp_duration, comp_order, comp_type, back_color, black, directory_link, window, screenXpixels, screenYpixels);
    end

   % Segway into the experiment.
    display_screen_text('You have completed the training segment. \n \n Press the spacebar to continue.', ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);
    display_screen_text('There will be several breaks built into the experiment session. If you have any questions, please call the proctor into the room.   \n \n Press the spacebar to continue. ', ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);
    display_screen_text('Press the spacebar to begin.', ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);

    
    % Run experiment. Breaks Included When Necessary
    break_statement = 'You may now take a break. \n \n Press the spacebar to continue the session.';
    for trial_counter=1:num_trials
        % Temporarily saving data table
        if mod(trial_counter, save_after) == 0                                                                            
            if exist(char(directory_link + "/results" + string("/dataP" + string(participant_number))), 'file')~=0
                delete(char(directory_link + "/results" + string("/dataP" + string(participant_number))));
            end
            writetable(results, char(directory_link + "/results" + string("/dataP" + string(participant_number))))
        end
        condition_num = exp_condition_list(trial_counter);
        [stimulus, standard_duration, comp_duration] = find_condition(condition_num, stimulus, twoimage_comp_durations, twoimage_standard_durations);
        result = run_trial(stimulus, standard_duration, comp_duration, comp_order, comp_type, back_color, black, directory_link, window, screenXpixels, screenYpixels);
        results.Stimulus(trial_counter) = stimulus;
        results.Standard_Time_Condition(trial_counter) = standard_duration;
        results.Comp_Time_Condition(trial_counter) = comp_duration;
        results.Response(trial_counter) = result;
        % Checking to present break
        if any(break_times == trial_counter)
            display_screen_text(break_statement, ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);
        end
    end
    
    % Saving data table
    if exist(char(directory_link + "/results" + "/dataP" + string(participant_number)), 'file')~=0
                delete(char(directory_link + "/results" + string("/dataP" + string(participant_number))));
    end
    writetable(results, char(directory_link + "/results" + string("/dataP" + string(participant_number))))
        
    % Experiment outro
    end_statement = 'You have completed the experiment! \n \n Call the proctor into the room.';
    display_screen_text(end_statement, ...
            window, ...
            back_color, ... 
            black, ...
            screenXpixels);

    % End experiment. Exit screen.
    Screen('Close', window);
end